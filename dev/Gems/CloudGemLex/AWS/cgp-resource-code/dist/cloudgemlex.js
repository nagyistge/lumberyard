!function(a){function b(a,b,c){a in i||(i[a]={name:a,declarative:!0,deps:b,declare:c,normalizedDeps:b})}function c(a){return m[a]||(m[a]={name:a,dependencies:[],exports:{},importers:[]})}function d(b){if(!b.module){var e=b.module=c(b.name),f=b.module.exports,g=b.declare.call(a,function(a,b){if(e.locked=!0,"object"==typeof a)for(var c in a)f[c]=a[c];else f[a]=b;for(var d=0,g=e.importers.length;g>d;d++){var h=e.importers[d];if(!h.locked)for(var i=0;i<h.dependencies.length;++i)h.dependencies[i]===e&&h.setters[i](f)}return e.locked=!1,b},b.name);e.setters=g.setters,e.execute=g.execute;for(var j=0,k=b.normalizedDeps.length;k>j;j++){var l,n=b.normalizedDeps[j],o=i[n],p=m[n];p?l=p.exports:o&&!o.declarative?l=o.esModule:o?(d(o),p=o.module,l=p.exports):l=h(n),p&&p.importers?(p.importers.push(e),e.dependencies.push(p)):e.dependencies.push(null),e.setters[j]&&e.setters[j](l)}}}function e(b){var c={};if(("object"==typeof b||"function"==typeof b)&&b!==a)if(k)for(var d in b)"default"!==d&&f(c,b,d);else{var e=b&&b.hasOwnProperty;for(var d in b)"default"===d||e&&!b.hasOwnProperty(d)||(c[d]=b[d])}return c.default=b,l(c,"__useDefault",{value:!0}),c}function f(a,b,c){try{var d;(d=Object.getOwnPropertyDescriptor(b,c))&&l(a,c,d)}catch(d){return a[c]=b[c],!1}}function g(b,c){var d=i[b];if(d&&!d.evaluated&&d.declarative){c.push(b);for(var e=0,f=d.normalizedDeps.length;f>e;e++){var k=d.normalizedDeps[e];-1==j.call(c,k)&&(i[k]?g(k,c):h(k))}d.evaluated||(d.evaluated=!0,d.module.execute.call(a))}}function h(a){if(o[a])return o[a];if("@node/"==a.substr(0,6))return o[a]=e(n(a.substr(6)));var b=i[a];if(!b)throw"Module "+a+" not present.";return d(i[a]),g(a,[]),i[a]=void 0,b.declarative&&l(b.module.exports,"__esModule",{value:!0}),o[a]=b.declarative?b.module.exports:b.esModule}var i={},j=Array.prototype.indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(this[b]===a)return b;return-1},k=!0;try{Object.getOwnPropertyDescriptor({a:0},"a")}catch(a){k=!1}var l;!function(){try{Object.defineProperty({},"a",{})&&(l=Object.defineProperty)}catch(a){l=function(a,b,c){try{a[b]=c.value||c.get.call(a)}catch(a){}}}}();var m={},n="undefined"!=typeof System&&System._nodeRequire||"undefined"!=typeof require&&require.resolve&&"undefined"!=typeof process&&require,o={"@empty":{}};return function(a,c,d,f){return function(g){g(function(g){for(var i=0;i<c.length;i++)!function(a,b){b&&b.__esModule?o[a]=b:o[a]=e(b)}(c[i],arguments[i]);f({register:b});var j=h(a[0]);if(a.length>1)for(var i=1;i<a.length;i++)h(a[i]);return d?j.default:j})}}}("undefined"!=typeof self?self:global)(["2b"],["3","8","6","7","9","a","d","31","32","1c","10","11"],!1,function(a){this.require,this.exports,this.module;a.register("2c",["3"],function(a,b){"use strict";var c,d,e=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}();b&&b.id;return{setters:[function(a){c=a}],execute:function(){d=function(a){function b(b,c,d,e,f){return a.call(this,b,c,d,e,f)||this}return e(b,a),b.prototype.getBotCount=function(){return a.prototype.get.call(this,"admin/numbots")},b.prototype.getBots=function(b){return a.prototype.get.call(this,"admin/listbots/"+b)},b.prototype.getDesc=function(b){return a.prototype.get.call(this,"admin/botdesc/"+b)},b.prototype.putDesc=function(b){return a.prototype.put.call(this,"admin/botdesc",b)},b.prototype.deleteBot=function(b){return a.prototype.delete.call(this,"admin/deletebot/"+b)},b.prototype.publishBot=function(b,c){return a.prototype.put.call(this,"admin/publishbot/"+b+"/"+c)},b.prototype.getBotStatus=function(b){return a.prototype.get.call(this,"admin/botstatus/"+b)},b}(c.ApiHandler),a("SpeechToTextApi",d)}}}),a.register("2d",["8","6","2e","7","9","a"],function(a,b){"use strict";var c,d,e,f,g,h,i,j=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},k=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a},function(a){h=a}],execute:function(){i=function(){function a(a,b,d){this.http=a,this.aws=b,this.metricservice=d,this.displayName="Speech Recognition",this.srcIcon="https://m.media-amazon.com/images/G/01/cloudcanvas/images/Speech_Recognition_Gem_optimized._V518452893_.png",this.state=new c.TackableStatus,this.metric=new c.TackableMeasure}return a.prototype.ngOnInit=function(){this._apiHandler=new e.SpeechToTextApi(this.context.ServiceUrl,this.http,this.aws,this.metricservice,this.context.identifier),this.report(this.metric),this.assign(this.state)},a.prototype.report=function(a){a.name="Bots",a.value="Loading...",this._apiHandler.getBotCount().subscribe(function(b){var c=JSON.parse(b.body.text());a.value=c.result.count},function(b){a.value="Offline"})},a.prototype.assign=function(a){a.label="Loading",a.styleType="Loading",this._apiHandler.get("service/status").subscribe(function(b){var c=JSON.parse(b.body.text());a.label="online"==c.result.status?"Online":"Offline",a.styleType="online"==c.result.status?"Enabled":"Offline"},function(b){a.label="Offline",a.styleType="Offline"})},a}(),j([d.Input(),k("design:type",Object)],i.prototype,"context",void 0),j([d.Input(),k("design:type",String)],i.prototype,"displayName",void 0),j([d.Input(),k("design:type",String)],i.prototype,"srcIcon",void 0),i=j([d.Component({selector:"cloudgempolly-thumbnail",template:'\n    <thumbnail-gem \n        [title]="displayName" \n        [cost]="\'Low\'" \n        [srcIcon]="srcIcon" \n        [metric]="metric" \n        [state]="state" \n        >\n    </thumbnail-gem>'}),k("design:paramtypes",[f.Http,g.AwsService,h.LyMetricService])],i),a("SpeechToTextThumbnailComponent",i)}}}),a.register("2f",[],function(a,b){"use strict";var c;b&&b.id;return{setters:[],execute:function(){c=function(){function a(a){this.bot_name=a.bot_name,this.current_version=a.current_version,this.status=a.status,this.updated=a.updated,this.created=a.created}return a}(),a("BotEntry",c)}}}),a.register("30",["7","6","d","9","2e","8","31","32","1c","a"],function(a,b){"use strict";var c,d,e,f,g,h,i,j,k,l,m,n,o=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,b){a.__proto__=b}||function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])};return function(b,c){function d(){this.constructor=b}a(b,c),b.prototype=null===c?Object.create(c):(d.prototype=c.prototype,new d)}}(),p=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g},q=this&&this.__metadata||function(a,b){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(a,b)};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a},function(a){g=a},function(a){h=a},function(a){i=a},function(a){j=a},function(a){k=a},function(a){l=a}],execute:function(){!function(a){a[a.Publish=0]="Publish",a[a.List=1]="List",a[a.Dismiss=2]="Dismiss"}(m||(m={})),a("Mode",m),n=function(a){function b(b,c,d,e,f){var g=a.call(this)||this;return g.http=b,g.aws=c,g.toastr=d,g.metric=f,g.subNavActiveIndex=0,g.exportAction=new k.ActionItem("Export",g.export),g.publishAction=new k.ActionItem("Publish",g.publishModal),g.unpublishedBotActions=[g.exportAction,g.publishAction],g.publishedBotActions=[g.exportAction],g.pageSize=10,g.toastr.setRootViewContainerRef(e),g}return o(b,a),b.prototype.ngOnInit=function(){this._apiHandler=new g.SpeechToTextApi(this.context.ServiceUrl,this.http,this.aws,this.metric,this.context.identifier),this.dismissModal=this.dismissModal.bind(this),this.publishModal=this.publishModal.bind(this),this.exportAction.onClick=this.exportAction.onClick.bind(this),this.publishAction.onClick=this.publishAction.onClick.bind(this),this.sttModes=m,this.selectedBotsNum=0,this.sortDir,this.alias="",this.bots=[],this.createBotTip="Create a bot using the configuration file. The process of creating a bot with JSON is described here: https://github.com/awslabs/aws-lex-web-ui/tree/master/templates. The created bots cannot be deleted until the next release.",this.publishBotTip="It could take several minutes to publish the bot.",this.update()},b.prototype.getSubNavItem=function(a){this.subNavActiveIndex=a,this.update()},b.prototype.uploadBotDefinition=function(a){var b=a.target,c=b.files[0],d=new FileReader;d.onload=function(a){var b=this,c=a.target.result,d=JSON.parse(c).bot,e={desc_file:JSON.parse(c)};this._apiHandler.putDesc(e).subscribe(function(){b.toastr.success("The bot '"+d.name+"' was uploaded successfully."),b.update()},function(a){b.toastr.error("The bot '"+d.name+"' was not uploaded properly. "+a.message)})}.bind(this),d.readAsText(c),b.value=""},b.prototype.update=function(){this.bots=[],this.updateCurrentPage("t")},b.prototype.updateCurrentPage=function(a){var b=this;this.sortDir="asc",this.isLoadingBots=!0,this._apiHandler.getBots(a).subscribe(function(a){for(var c=JSON.parse(a.body.text()),d=0,e=c.result.bots;d<e.length;d++){var f=e[d];b.bots.push(f),b.checkBotStatus(f)}""!=c.result.next_token?b.updateCurrentPage(c.result.nextToken):(b.updatePaginationInfo(),b.sort(0,b.bots.length-1,b.bots,"bot_name",b.sortDir),b.updateBots(1),b.isLoadingBots=!1)},function(a){b.toastr.error("The bots did not refresh properly. "+a.message),b.isLoadingBots=!1})},b.prototype.export=function(a){var b=this;this._apiHandler.getDesc(a.bot_name).subscribe(function(c){var d=JSON.parse(c.body.text()),e=d.result.desc_file,f="data:text/json;charset=utf-8,"+encodeURIComponent(JSON.stringify(e,null,4)),g=document.createElement("a");g.href=f,g.download=a.bot_name+".json",document.body.appendChild(g),g.click(),document.body.removeChild(g),b.toastr.success("The bot '"+a.bot_name+"' was exported.")},function(c){b.toastr.error("The bot '"+a.bot_name+"' was not exported properly. "+c.message)})},b.prototype.publishModal=function(a){this.mode=m.Publish,this.currentBot=a,this.alias=""},b.prototype.publish=function(){var a=this;this.modalRef.close(),this.mode=m.List,this.currentBot.status="PUBLISHING",this._apiHandler.publishBot(this.currentBot.bot_name,this.alias).subscribe(function(){a.toastr.success("The bot '"+a.currentBot.bot_name+"' was published."),a.checkBotStatus(a.currentBot)},function(b){a.toastr.error("The bot '"+a.currentBot.bot_name+"' was not published properly. "+b.message),a.currentBot.status="FAILED"})},b.prototype.sortTable=function(){var a=this.bots,b="bot_name";this.sort(0,a.length-1,a,b,this.getSortOrder(b)),this.paginationRef.reset()},b.prototype.updateSelectedBotsNum=function(a){a.isSelected?this.selectedBotsNum--:this.selectedBotsNum++},b.prototype.updateBots=function(a){var b=(a-1)*this.pageSize,c=a*this.pageSize;this.botsOnCurrentPage=this.bots.slice(b,c)},b.prototype.dismissModal=function(a){this.mode=m.List},b.prototype.openAWSConsole=function(){this.consoleLinkRef.nativeElement.href="https://console.aws.amazon.com/lex/home?region"+this.aws.context.region},b.prototype.clickUploadButton=function(){this.uploadButtonRef.nativeElement.click()},b.prototype.getSortOrder=function(a){return""==this.sortDir?this.sortDir="asc":this.sortDir="asc"==this.sortDir?"desc":"asc",this.sortDir},b.prototype.sort=function(a,b,c,d,e){for(var f=a,g=b,h=c[Math.floor((a+b)/2)];f<=g;){if("asc"==e){for(;c[f][d].toLowerCase()<h[d].toLowerCase();)f++;for(;c[g][d].toLowerCase()>h[d].toLowerCase();)g--}else if("desc"==e){for(;c[f][d].toLowerCase()>h[d].toLowerCase();)f++;for(;c[g][d].toLowerCase()<h[d].toLowerCase();)g--}if(f<=g){var i=JSON.parse(JSON.stringify(c[f]));c[f]=JSON.parse(JSON.stringify(c[g])),c[g]=JSON.parse(JSON.stringify(i)),f++,g--}}a<g&&this.sort(a,g,c,d,e),f<b&&this.sort(f,b,c,d,e)},b.prototype.updatePaginationInfo=function(){var a=this.bots.length;this.botPages=Math.ceil(a/this.pageSize)},b.prototype.checkBotStatus=function(a){var b=this;this._apiHandler.getBotStatus(a.bot_name).subscribe(function(c){var d=JSON.parse(c.body.text());if("BUILDING"==d.result.status||"PUBLISHING"==d.result.status)b.checkBotStatus(a);else for(var e=0,f=b.bots;e<f.length;e++){var g=f[e];if(g.bot_name==a.bot_name){g.status=d.result.status;break}}},function(c){b.toastr.error("The status of bot '"+a.bot_name+"' did not refresh properly. "+c.message),b.isLoadingBots=!1})},b}(h.AbstractCloudGemIndexComponent),p([d.Input(),q("design:type",Object)],n.prototype,"context",void 0),p([d.ViewChild(e.ModalComponent),q("design:type",e.ModalComponent)],n.prototype,"modalRef",void 0),p([d.ViewChild(j.PaginationComponent),q("design:type",j.PaginationComponent)],n.prototype,"paginationRef",void 0),p([d.ViewChild("upload"),q("design:type",d.ElementRef)],n.prototype,"uploadButtonRef",void 0),p([d.ViewChild("selectAllBots"),q("design:type",d.ElementRef)],n.prototype,"selectAllBotsRef",void 0),p([d.ViewChild("consoleLink"),q("design:type",d.ElementRef)],n.prototype,"consoleLinkRef",void 0),n=p([d.Component({selector:"speech-to-text-index",template:'<facet-generator [context]="context"                  [tabs]="[\'Bots\', \'Settings\']"                  (tabClicked)="getSubNavItem($event)" [metricIdentifier]="context.identifier"></facet-generator>  <div *ngIf="subNavActiveIndex == 0">     <button class="btn l-primary basic-button" (click)="clickUploadButton()">         Create Bot     </button>     <i class="fa fa-question-circle-o question-mark" aria-hidden="true" placement="right" triggers="click" [ngbTooltip]="createBotTip"></i>     <input #upload class="upload" type="file" (change)="uploadBotDefinition($event)" accept=".json"/>      <div [ngSwitch]="isLoadingBots">         <div *ngSwitchCase="true">             <div class="loading-spinner-container">                 <i class="fa fa-spinner fa-spin fa-lg" aria-hidden="true"></i>             </div>         </div>         <div class="content-container" *ngSwitchCase="false">             <div *ngIf="!bots || bots.length == 0">                 No bot             </div>             <div *ngIf="bots.length > 0">                 <table class="table table-hover">                     <thead>                         <tr>                             <th class="name-column" (click)="sortTable()">                                 BOT NAME                                 <i *ngIf="sortDir == \'asc\'" class="fa fa-sort-amount-asc" aria-hidden="true"></i>                                 <i *ngIf="sortDir == \'desc\'" class="fa fa-sort-amount-desc" aria-hidden="true"></i>                             </th>                             <th class="version-column"> CURRENT VERSION </th>                             <th class="status-column"> STATUS </th>                             <th class="updated-column"> UPDATED </th>                             <th class="created-column"> CREATED </th>                         </tr>                     </thead>                     <tbody>                         <tr *ngFor="let bot of botsOnCurrentPage">                             <td class="name-column">                                 {{bot.bot_name}}                             </td>                             <td class="version-column">                                 {{bot.current_version}}                             </td>                             <td class="status-column">                                 <i *ngIf="bot.status == \'PUBLISHING\'" class="fa fa-question-circle-o question-mark" aria-hidden="true" placement="left" [ngbTooltip]="publishBotTip"></i>                                 {{bot.status}}                                 <i *ngIf="bot.status == \'PUBLISHING\'" class="fa fa-refresh fa-spin" aria-hidden="true"></i>                             </td>                             <td class="updated-column">                                 {{bot.updated}}                             </td>                             <td class="created-column">                                 {{bot.created}}                             </td>                             <td>                                 <div class="float-right">                                     <action-stub-items *ngIf="bot.status != \'PUBLISHED\'" [model]="bot" [custom]="unpublishedBotActions"></action-stub-items>                                     <action-stub-items *ngIf="bot.status == \'PUBLISHED\'" [model]="bot" [custom]="publishedBotActions"></action-stub-items>                                 </div>                             </td>                         </tr>                     </tbody>                 </table>             </div>         </div>         <pagination [pages]="botPages"                     (pageChanged)="updateBots($event)"></pagination>     </div> </div> <div *ngIf="subNavActiveIndex == 1">     <span class="col-md-10"> Additional settings can be configured through the <a #consoleLink href="" (click)="openAWSConsole()" target="_blank">Amazon Lex Console <i class="fa fa-external-link"></i></a>.</span> </div>  \x3c!-- Publish modal --\x3e <modal *ngIf="mode == sttModes.Publish"        [title]="\'Publish Bot\'"        [autoOpen]="true"        [hasSubmit]="true"        [onDismiss]="dismissModal"        [onClose]="dismissModal"        [submitButtonText]="\'Publish Bot\'"        (modalSubmitted)="publish()"        [metricIdentifier]="context.identifier">     <div class="modal-body">         <div class="modal-body">             <form>                 <div class="form-group row">                     <label class="col-3 col-form-label affix">Alias</label>                     <span class="col-8">                         <input type="text" class="form-control" [(ngModel)]="alias" name="alias" placeholder="MyBotAlias">                     </span>                 </div>             </form>         </div>         <p>             For more information on Lex versioning and aliases, see the documentation <a href="http://docs.aws.amazon.com/lex/latest/dg/versioning-aliases.html" target="_blank">here</a>.         </p>     </div> </modal>',styles:[".loading-spinner-container{clear:both;text-align:center}.basic-button{margin-left:5px;margin-right:5px}.number{margin-top:8px;margin-right:5px}.upload{display:none}.content-container{margin-bottom:30px}.question-mark{cursor:pointer}table.table{margin-bottom:30px}table.table thead{display:table-header-group}table.table tr .name-column{width:15%}table.table tr .version-column{width:15%}table.table tr .preview-column{width:15%}table.table tr .status-column{width:15%}table.table tr .updated-column{width:15%}table.table tr .created-column{width:15%}"]}),q("design:paramtypes",[c.Http,f.AwsService,i.ToastsManager,d.ViewContainerRef,l.LyMetricService])],n),a("SpeechToTextIndexComponent",n)}}}),a.register("33",["10","2e","11","6"],function(a,b){"use strict";var c,d,e,f,g,h=this&&this.__decorate||function(a,b,c,d){var e,f=arguments.length,g=f<3?b:null===d?d=Object.getOwnPropertyDescriptor(b,c):d;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)g=Reflect.decorate(a,b,c,d);else for(var h=a.length-1;h>=0;h--)(e=a[h])&&(g=(f<3?e(g):f>3?e(b,c,g):e(b,c))||g);return f>3&&g&&Object.defineProperty(b,c,g),g};b&&b.id;return{setters:[function(a){c=a},function(a){d=a},function(a){e=a},function(a){f=a}],execute:function(){g=function(){function a(){}return a}(),g=h([f.NgModule({imports:[e.GameSharedModule,c.GemModule],declarations:[d.SpeechToTextIndexComponent,d.SpeechToTextThumbnailComponent],providers:[],bootstrap:[d.SpeechToTextThumbnailComponent,d.SpeechToTextIndexComponent]})],g),a("CloudGemSpeechToTextModule",g)}}}),a.register("2e",["2c","2d","2f","30","33"],function(a,b){"use strict";function c(b){var c={};for(var d in b)"default"!==d&&(c[d]=b[d]);a(c)}b&&b.id;return{setters:[function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)},function(a){c(a)}],execute:function(){}}}),a.register("2b",["2e"],function(a,b){"use strict";function c(a){return d.CloudGemSpeechToTextModule}b&&b.id;a("definition",c);var d;return{setters:[function(a){d=a}],execute:function(){}}})})(function(a){if("function"==typeof define&&define.amd)define(["app/shared/class/index.js","app/view/game/module/cloudgems/class/index.js","@angular/core","@angular/http","app/aws/aws.service.js","app/shared/service/index.js","app/shared/component/index.js","ng2-toastr/ng2-toastr.js","app/view/game/module/shared/component/index.js","app/view/game/module/shared/class/index.js","app/view/game/module/cloudgems/gem.module.js","app/view/game/module/shared/shared.module.js"],a);else{if("object"!=typeof module||!module.exports||"function"!=typeof require)throw new Error("Module must be loaded as AMD or CommonJS");module.exports=a(require("app/shared/class/index.js"),require("app/view/game/module/cloudgems/class/index.js"),require("@angular/core"),require("@angular/http"),require("app/aws/aws.service.js"),require("app/shared/service/index.js"),require("app/shared/component/index.js"),require("ng2-toastr/ng2-toastr.js"),require("app/view/game/module/shared/component/index.js"),require("app/view/game/module/shared/class/index.js"),require("app/view/game/module/cloudgems/gem.module.js"),require("app/view/game/module/shared/shared.module.js"))}});