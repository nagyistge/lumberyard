chunk ::=
	block

block ::=
	{statement} [return_statement]

statement ::= 
	assignment_statement |
	initialization_statement |
	declaration_list |
	function_call |
	scope |
	if_statement |
	while_statement |
	repeat_statement |
	break |
	next

scope ::=
	do block end

assignment_statement ::=
	variable_list ‘=’ expression_list

if_statement ::=
	if expression then block {elseif expression then block} [else block] end 

initialization_statement ::=
	Name = expression

return_statement ::=
	return [expression_list]

repeat_statement ::=
	repeat block until expression

while_statement ::=
	while expression do block end

type ::=
	number |
	bool | 
	entityID |
	string |
	vector |
	transform |
	function_signature |
	[const] object '{' Name '}' |
	list '{' type '}'

declaration ::=
	Name ':' type

declaration_list ::=
	declaration {',' declaration_list}

variable_list ::=
	variable {',' variable}

variable ::=
	Name |
	prefix_expression '[' expression ']' |
	prefix_expression '.' Name

expression_list ::=
	expression {',' expression}

expression ::=
	null |
	false |
	true |
	Numeral |
	StringLiteral |
	function_definition |
	prefix_expression |
	expression binary_operation expression |
	unary_operation expression

prefix_expression ::=
	variable |
	function_call |
	'(' expression ')'

function_call ::=
	prefix_expression arguments

arguments ::=
	'(' [expression_list] ')'

function_signature ::=
	function '(' [declaration_list] ')' '->' ['(' [declaration_list] ')']

function_definition ::=
	function_signature function_body

function_body ::=
	block end

binary_operation ::=
	'+' |
	'-' |
	'*' |
	'/' |
	'^' |
	'%' |
	'<' |
	'>' |
	'<=' |
	'>=' |
	'==' |
	'!=' |
	and |
	or

unary_operation ::=
	'-' |
	not